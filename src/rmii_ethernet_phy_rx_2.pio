/*
 * Copyright (c) 2023 zsdotkr@gmail.com
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

/*
	Actual IRQ number corresponding relative IRQ number of each SM

	+---------+-----+-----+-----+-----+
	| Rel IRQ |  4  |  5  |  6  |  7  |
	+---------+-----+-----+-----+-----+
	|  SM 0   |  4  |  5  |  6  |  7  |	`irq wait 4 rel` of SM#0 = IRQ 4, `irq clear 6 rel` of SM#0 = IRQ 6
	+---------+-----+-----+-----+-----+
	|  SM 1   |  5  |  6  |  7  |  4  |
	+---------+-----+-----+-----+-----+
	|  SM 2   |  6  |  7  |  4  |  5  | `irq wait 4 rel` of SM#2 = IRQ 6, `irq clear 6 rel` of SM#0 = IRQ 4
	+---------+-----+-----+-----+-----+
	|  SM 3   |  7  |  4  |  5  |  6  |
	+---------+-----+-----+-----+-----+
*/
.program rmii_ethernet_phy_rx_2_data	; Must be run at 100MHz

.wrap_target
	irq wait 4 rel		; wait until counterpart RX SM finish Receiving

	; ----- [STEP_A] check IDLE
	wait 1 gpio 23 [1]	; wait until CLK=H
idle:
	wait 0 pin 2 [1]
	jmp pin idle [1]	; wait two 'consecutive' "CRS/DV=Low"

	wait 0 pin 0 [1]	; check RXD[0]=L
	wait 0 pin 1 [1]	; check RXD[1]=L

	; ----- [STEP_B] check start of preamble
	wait 1 pin 2 [2]	; check CRS/DV=H
	wait 1 pin 0 [1]	; check RXD[0]=H

	; ----- [STEP_C] check last bit of SFD (RXD[1:0] = 11b)
	wait 1 pin 1 [1]	; check RXD[1]=H

	; ----- [STEP_D] receiving data, CRSDV=H
crsdv_h:
	in pins, 2 			; push RX[1:0] to ISR
	jmp pin crsdv_h		; loop until CRS/DV=H

	; ----- [STEP_E] for RMII v1.2
	in pins, 2  		; push RX[1:0] to ISR evne if CRS/DV=L
	jmp pin crsdv_h		; CRS/DV is retriggered, jump to receving routine

	; ----- [STEP-G] clearing ISR
	mov isr, y			; move data to isr make isr to reset its shift-counter

	; ----- [STEP-H] raise ISR #3 to inform end-of-frame and wait for ISR to clear
	;                (ISR code should clear ISR after preparing next DMA buffer)
	irq clear 6 rel		; inform counterpart RX SM to start Receiving
	irq wait 0 rel
.wrap	; return to [STEP-A], new DMA buffer is ready!


% c-sdk {

static inline void rmii_ethernet_phy_rx_2_init(PIO pio, uint sm, uint offset, uint pin, uint div) {
	pio_sm_set_consecutive_pindirs(pio, sm, pin, 3, false);

	pio_sm_config c = rmii_ethernet_phy_rx_2_data_program_get_default_config(offset);
	sm_config_set_in_pins(&c, pin);

	pio_gpio_init(pio, pin);
	pio_gpio_init(pio, pin + 1);
	pio_gpio_init(pio, pin + 2);

	sm_config_set_jmp_pin(&c, pin+2); 	// jump pin = CRSDV

	sm_config_set_in_shift(&c, true, true, 8);
	sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

	sm_config_set_clkdiv(&c, div);	// clock frequency should be 100MHz

	pio_sm_init(pio, sm, offset, &c);
	pio_sm_set_enabled(pio, sm, true);
}
%}
